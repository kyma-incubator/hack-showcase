// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import eventing_kyma_project_iov1alpha1 "github.com/kyma-project/kyma/components/event-bus/api/push/eventing.kyma-project.io/v1alpha1"
import k8scomponents "github.com/kyma-incubator/hack-showcase/scenario/azure-comments-analytics/internal/k8scomponents"
import manager "github.com/kyma-incubator/hack-showcase/scenario/azure-comments-analytics/internal/manager"
import mock "github.com/stretchr/testify/mock"
import servicecatalogv1beta1 "github.com/poy/service-catalog/pkg/apis/servicecatalog/v1beta1"
import v1alpha1 "github.com/kyma-project/kyma/components/service-binding-usage-controller/pkg/apis/servicecatalog/v1alpha1"
import v1beta1 "github.com/kubeless/kubeless/pkg/apis/kubeless/v1beta1"

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CreateFunction provides a mock function with given fields: function
func (_m *Manager) CreateFunction(function k8scomponents.Function) ([]v1beta1.Function, error) {
	ret := _m.Called(function)

	var r0 []v1beta1.Function
	if rf, ok := ret.Get(0).(func(k8scomponents.Function) []v1beta1.Function); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1beta1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(k8scomponents.Function) error); ok {
		r1 = rf(function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceBindingUsages provides a mock function with given fields: bindingUsage
func (_m *Manager) CreateServiceBindingUsages(bindingUsage k8scomponents.BindingUsage) ([]v1alpha1.ServiceBindingUsage, error) {
	ret := _m.Called(bindingUsage)

	var r0 []v1alpha1.ServiceBindingUsage
	if rf, ok := ret.Get(0).(func(k8scomponents.BindingUsage) []v1alpha1.ServiceBindingUsage); ok {
		r0 = rf(bindingUsage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.ServiceBindingUsage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(k8scomponents.BindingUsage) error); ok {
		r1 = rf(bindingUsage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceBindings provides a mock function with given fields: binding
func (_m *Manager) CreateServiceBindings(binding k8scomponents.Binding) ([]servicecatalogv1beta1.ServiceBinding, error) {
	ret := _m.Called(binding)

	var r0 []servicecatalogv1beta1.ServiceBinding
	if rf, ok := ret.Get(0).(func(k8scomponents.Binding) []servicecatalogv1beta1.ServiceBinding); ok {
		r0 = rf(binding)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicecatalogv1beta1.ServiceBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(k8scomponents.Binding) error); ok {
		r1 = rf(binding)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceInstances provides a mock function with given fields: instance, serviceClassList
func (_m *Manager) CreateServiceInstances(instance k8scomponents.ServiceInstance, serviceClassList *servicecatalogv1beta1.ServiceClassList) ([]servicecatalogv1beta1.ServiceInstance, error) {
	ret := _m.Called(instance, serviceClassList)

	var r0 []servicecatalogv1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(k8scomponents.ServiceInstance, *servicecatalogv1beta1.ServiceClassList) []servicecatalogv1beta1.ServiceInstance); ok {
		r0 = rf(instance, serviceClassList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicecatalogv1beta1.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(k8scomponents.ServiceInstance, *servicecatalogv1beta1.ServiceClassList) error); ok {
		r1 = rf(instance, serviceClassList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: subscription
func (_m *Manager) CreateSubscription(subscription k8scomponents.Subscription) ([]eventing_kyma_project_iov1alpha1.Subscription, error) {
	ret := _m.Called(subscription)

	var r0 []eventing_kyma_project_iov1alpha1.Subscription
	if rf, ok := ret.Get(0).(func(k8scomponents.Subscription) []eventing_kyma_project_iov1alpha1.Subscription); ok {
		r0 = rf(subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]eventing_kyma_project_iov1alpha1.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(k8scomponents.Subscription) error); ok {
		r1 = rf(subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllComponents provides a mock function with given fields: installedComponents, clientWrappers
func (_m *Manager) DeleteAllComponents(installedComponents *manager.InstalledComponents, clientWrappers *manager.Wrappers) {
	_m.Called(installedComponents, clientWrappers)
}
