// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-incubator/hack-showcase/scenario/azure-comments-analytics/internal/apperrors"

import mock "github.com/stretchr/testify/mock"
import runtime "k8s.io/apimachinery/pkg/runtime"
import v1beta1 "github.com/poy/service-catalog/pkg/apis/servicecatalog/v1beta1"

// ServiceInstance is an autogenerated mock type for the ServiceInstance type
type ServiceInstance struct {
	mock.Mock
}

// Create provides a mock function with given fields: body
func (_m *ServiceInstance) Create(body *v1beta1.ServiceInstance) (*v1beta1.ServiceInstance, apperrors.AppError) {
	ret := _m.Called(body)

	var r0 *v1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(*v1beta1.ServiceInstance) *v1beta1.ServiceInstance); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceInstance)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(*v1beta1.ServiceInstance) apperrors.AppError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// GetEventBody provides a mock function with given fields: name, serviceClassExternalName, plan, parameters
func (_m *ServiceInstance) GetEventBody(name string, serviceClassExternalName string, plan string, parameters *runtime.RawExtension) *v1beta1.ServiceInstance {
	ret := _m.Called(name, serviceClassExternalName, plan, parameters)

	var r0 *v1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(string, string, string, *runtime.RawExtension) *v1beta1.ServiceInstance); ok {
		r0 = rf(name, serviceClassExternalName, plan, parameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceInstance)
		}
	}

	return r0
}
