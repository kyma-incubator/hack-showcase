// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1beta1 "github.com/kubeless/kubeless/pkg/apis/kubeless/v1beta1"
)

// Function is an autogenerated mock type for the Function type
type Function struct {
	mock.Mock
}

// Create provides a mock function with given fields: body
func (_m *Function) Create(body *v1beta1.Function) (*v1beta1.Function, error) {
	ret := _m.Called(body)

	var r0 *v1beta1.Function
	if rf, ok := ret.Get(0).(func(*v1beta1.Function) *v1beta1.Function); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1beta1.Function) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, options
func (_m *Function) Delete(name string, options *v1.DeleteOptions) error {
	ret := _m.Called(name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.DeleteOptions) error); ok {
		r0 = rf(name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prepare provides a mock function with given fields: name, lambdaName, channelName
func (_m *Function) Prepare(name string, lambdaName string, channelName string) *v1beta1.Function {
	ret := _m.Called(name, lambdaName, channelName)

	var r0 *v1beta1.Function
	if rf, ok := ret.Get(0).(func(string, string, string) *v1beta1.Function); ok {
		r0 = rf(name, lambdaName, channelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.Function)
		}
	}

	return r0
}
