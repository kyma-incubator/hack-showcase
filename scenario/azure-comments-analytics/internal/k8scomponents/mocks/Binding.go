// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-incubator/hack-showcase/scenario/azure-comments-analytics/internal/apperrors"

import mock "github.com/stretchr/testify/mock"
import v1beta1 "github.com/poy/service-catalog/pkg/apis/servicecatalog/v1beta1"

// Binding is an autogenerated mock type for the Binding type
type Binding struct {
	mock.Mock
}

// Create provides a mock function with given fields: body
func (_m *Binding) Create(body *v1beta1.ServiceBinding) (*v1beta1.ServiceBinding, apperrors.AppError) {
	ret := _m.Called(body)

	var r0 *v1beta1.ServiceBinding
	if rf, ok := ret.Get(0).(func(*v1beta1.ServiceBinding) *v1beta1.ServiceBinding); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceBinding)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(*v1beta1.ServiceBinding) apperrors.AppError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// GetEventBody provides a mock function with given fields: name, params
func (_m *Binding) GetEventBody(name string, params ...string) *v1beta1.ServiceBinding {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1beta1.ServiceBinding
	if rf, ok := ret.Get(0).(func(string, ...string) *v1beta1.ServiceBinding); ok {
		r0 = rf(name, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceBinding)
		}
	}

	return r0
}
