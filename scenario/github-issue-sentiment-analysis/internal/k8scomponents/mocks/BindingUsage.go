// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import v1alpha1 "github.com/kyma-project/kyma/components/service-binding-usage-controller/pkg/apis/servicecatalog/v1alpha1"

// BindingUsage is an autogenerated mock type for the BindingUsage type
type BindingUsage struct {
	mock.Mock
}

// Create provides a mock function with given fields: body
func (_m *BindingUsage) Create(body *v1alpha1.ServiceBindingUsage) (*v1alpha1.ServiceBindingUsage, error) {
	ret := _m.Called(body)

	var r0 *v1alpha1.ServiceBindingUsage
	if rf, ok := ret.Get(0).(func(*v1alpha1.ServiceBindingUsage) *v1alpha1.ServiceBindingUsage); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ServiceBindingUsage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.ServiceBindingUsage) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, options
func (_m *BindingUsage) Delete(name string, options *v1.DeleteOptions) error {
	ret := _m.Called(name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.DeleteOptions) error); ok {
		r0 = rf(name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prepare provides a mock function with given fields: name, envPrefix, lambdaName
func (_m *BindingUsage) Prepare(name string, envPrefix string, lambdaName string) *v1alpha1.ServiceBindingUsage {
	ret := _m.Called(name, envPrefix, lambdaName)

	var r0 *v1alpha1.ServiceBindingUsage
	if rf, ok := ret.Get(0).(func(string, string, string) *v1alpha1.ServiceBindingUsage); ok {
		r0 = rf(name, envPrefix, lambdaName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ServiceBindingUsage)
		}
	}

	return r0
}
